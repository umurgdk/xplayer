using System;
using RedditPlayer.Domain.Media;
using CocoaSpotify;
using Foundation;
using System.Diagnostics;
namespace RedditPlayer.Mac.Players
{
    public class SpotifyPlayer : NSObject, IPlayer
    {
        byte [] appKey = {
            0x01, 0x44, 0x5D, 0x6E, 0xA2, 0xA3, 0xA9, 0xEF, 0x71, 0x5D, 0x4C, 0x8C, 0x46, 0x63, 0x8C, 0xA6,
            0x54, 0x23, 0xA9, 0xDF, 0x09, 0x1F, 0xB2, 0x46, 0x40, 0x9B, 0x67, 0xA2, 0x1F, 0x59, 0x62, 0x68,
            0xF5, 0x8D, 0x23, 0x06, 0x71, 0x6C, 0xAA, 0x5A, 0x1D, 0x9A, 0x5F, 0xDC, 0x04, 0xA7, 0x21, 0xCA,
            0xA4, 0x14, 0xBB, 0x7C, 0xF1, 0xF8, 0x8F, 0x80, 0x16, 0x59, 0x9A, 0x7C, 0x89, 0x3E, 0x75, 0x74,
            0xB3, 0x98, 0xCF, 0xE7, 0x8B, 0x0B, 0x70, 0x1E, 0x5C, 0xE9, 0xB5, 0x73, 0xB9, 0x7D, 0x20, 0x54,
            0x3E, 0x26, 0x75, 0x79, 0xD5, 0xF3, 0x85, 0x40, 0xD7, 0x5F, 0x87, 0xC9, 0xE6, 0x83, 0x9F, 0xC4,
            0xF9, 0xCF, 0xE2, 0x33, 0xA5, 0xE7, 0xCD, 0xD4, 0xD7, 0x15, 0xD1, 0x41, 0x17, 0xB7, 0x6D, 0xFF,
            0x06, 0x2F, 0x70, 0x47, 0x01, 0x1A, 0x34, 0xD5, 0xDC, 0x3B, 0xE8, 0xAF, 0x43, 0xAC, 0xBD, 0x65,
            0xEA, 0xC2, 0x71, 0x33, 0xAD, 0x02, 0x03, 0x96, 0x3F, 0xE4, 0xAE, 0xED, 0x71, 0xD3, 0x4E, 0xFA,
            0x80, 0xED, 0xF6, 0xD0, 0x67, 0x91, 0x81, 0xB0, 0xFD, 0x04, 0x80, 0x02, 0xC9, 0xC4, 0x99, 0x5F,
            0x5A, 0x15, 0x41, 0xC7, 0x1D, 0xC6, 0x71, 0xF0, 0x01, 0x34, 0x10, 0x0C, 0x6C, 0x78, 0x40, 0xB7,
            0xFC, 0x89, 0x12, 0xF7, 0x70, 0x39, 0x49, 0xCB, 0x43, 0x50, 0xF1, 0x68, 0xA4, 0x4A, 0xDE, 0xCD,
            0x84, 0x23, 0x99, 0x03, 0x9C, 0xB8, 0x33, 0x6C, 0xB2, 0xC4, 0xFA, 0x93, 0xA6, 0x06, 0x12, 0xA6,
            0xF1, 0x0B, 0x9E, 0xE4, 0x1D, 0xD7, 0x7B, 0x92, 0x89, 0x1E, 0xCB, 0x22, 0xB8, 0x72, 0x26, 0x16,
            0x49, 0x2B, 0xA9, 0x06, 0x63, 0xE2, 0x8F, 0xE0, 0x99, 0x61, 0x1D, 0xDF, 0x76, 0x30, 0xB4, 0xA9,
            0x03, 0xD4, 0x59, 0x90, 0xD9, 0xE5, 0x63, 0x90, 0x9D, 0x99, 0x7D, 0xEE, 0x62, 0x4A, 0x9F, 0xF5,
            0xF0, 0xF3, 0x84, 0x18, 0x89, 0x8C, 0xA9, 0xE5, 0x92, 0x50, 0x01, 0x2D, 0xF4, 0x64, 0x33, 0xD4,
            0xFD, 0x00, 0x1B, 0xBA, 0xEA, 0x32, 0xE8, 0x79, 0x2D, 0xC9, 0x8D, 0x98, 0x77, 0x32, 0xC3, 0xCB,
            0xC6, 0xB9, 0x88, 0x64, 0x36, 0xEE, 0xFC, 0xBA, 0x40, 0x54, 0x9A, 0x3E, 0xC4, 0x36, 0x73, 0x93,
            0x65, 0x23, 0xF5, 0x3B, 0x3D, 0x8E, 0x97, 0x4A, 0x10, 0xBF, 0xF7, 0xBE, 0xBE, 0x0B, 0xCB, 0xE4,
            0x07,
        };

        SPPlaybackManager playbackManager;
        Track currentTrack;
        double mutedVolume;

        public SpotifyPlayer ()
        {
            NSError error;
            SPSession.InitializeSharedSessionWithApplicationKey (NSData.FromArray (appKey), "per.umurgdk.xplayer", SPAsyncLoadingPolicy.Immediate, out error);
            SPSession.SharedSession.AttemptLogin ("umur.gedik", "1Xiackok9m9u1r");

            playbackManager = new SPPlaybackManager (SPSession.SharedSession);
        }

        public TimeSpan GetElapsedTime ()
        {
            if (currentTrack == null) {
                return TimeSpan.Zero;
            }

            return TimeSpan.FromSeconds (playbackManager.TrackPosition);
        }

        public void Pause ()
        {
            playbackManager.IsPlaying = false;
        }

        public void Play (Track track)
        {
            if (currentTrack == track) {
                playbackManager.IsPlaying = true;
                return;
            }

            currentTrack = track;

            SPTrack.TrackForTrackURL (NSUrl.FromString ("spotify:track:" + track.Id), SPSession.SharedSession, (spTrack) => {
                SPAsyncLoading.WaitUntilLoaded (spTrack, 2000, (items, others) => {
                    playbackManager.PlayTrack (spTrack, (NSError err) => {
                        if (err != null) {
                            Debug.WriteLine ("Error playing spotify track: " + track.Id);
                            Debug.WriteLine (err.ToString ());
                        }
                    });
                });
            });
        }

        public void Seek (float progress)
        {
            var seconds = currentTrack.Duration.TotalSeconds;
            playbackManager.SeekToTrackPosition (seconds * progress);
        }

        public void SetVolume (float volume)
        {
            playbackManager.Volume = volume;
        }

        public void Stop ()
        {
            playbackManager.IsPlaying = false;
        }

        public void Unmute ()
        {
            playbackManager.Volume = mutedVolume;
        }

        public void Mute ()
        {
            mutedVolume = playbackManager.Volume;
            playbackManager.Volume = 0;
        }
    }
}

